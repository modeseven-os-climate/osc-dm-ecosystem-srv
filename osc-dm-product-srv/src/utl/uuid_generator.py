
import os, yaml, uuid
from datetime import datetime
import logging

LOGGING_FORMAT = "%(asctime)s - %(levelname)s - %(message)s"
logging.basicConfig(level=logging.INFO, format=LOGGING_FORMAT)
logger = logging.getLogger(__name__)


def generate_product_uuid(
        product_name: str
    ):
    logger.info("*** inside uuid creation function ***")
    product_dir = f'./dataproducts/{product_name}/'
    uuid_file = product_dir + "uuids.yaml"
    output_uuid = None
    if os.path.exists(uuid_file):
        logger.info(f"uuid file for product exists: {product_name}")
        # TODO make more specific error
        raise Exception(f"uuid file already exists for the product: {product_name}")



    else:
        import getpass
        generation_user = getpass.getuser()
        generation_date = datetime.now().strftime("%d-%b-%Y %H:%M:%S %Z")
        logger.info(f"uuid file for product does not exists: {product_name}")
        output_uuid = f"{uuid.uuid4()}"
        # TODO append details to the top of the file
        details = (
            "##### \n"
            "# \n"
            "# UUIDs Definition \n"
            "# \n"
            "# This file contains the UUIDs for your product and artifacts (by name) \n"
            "# \n"
            "# ----- \n"
            "# \n"
            f"# Generated on: {generation_date} \n"
            f"# Generated by: {generation_user} \n"
            "# \n"
            "##### \n"
        )
        yaml_dict = {
            "product_uuid": output_uuid
        }
        logger.info("*** pre yaml dump ***")
        with open(uuid_file, 'w') as file:
            yaml.dump(yaml_dict, file, default_flow_style=False)
        logger.info("*** post yaml dump ***")

    return output_uuid


def generate_artifact_uuid(
        product_name: str,
        name: str):
    logger.info("*** inside uuid creation function ***")
    product_dir = f'./dataproducts/{product_name}/'
    artifact_dir = product_dir + "artifacts"
    uuid_file = product_dir + "uuids.yaml"
    output_uuid = None
    if os.path.exists(uuid_file):
        logger.info(f"uuid file for product exists: {product_name}")
        output_uuid = f"{uuid.uuid4()}"
        with open(uuid_file, 'r') as file:
            yaml_dict = yaml.safe_load(file)
            yaml_dict.setdefault("artifact_uuids", [])
            yaml_dict["artifact_uuids"].append({
                name: output_uuid
            })

        with open(uuid_file, 'w') as file:
            yaml.dump(yaml_dict, file, default_flow_style=False)

        return output_uuid
    else:
        logger.info(f"uuid file for product does exist: {product_name}")
        # TODO make more specific error
        raise Exception(f"uuid file does not exist for the product: {product_name}")